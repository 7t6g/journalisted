#!/usr/bin/env python2.4
#
# Copyright (c) 2007 Media Standards Trust
# Licensed under the Affero General Public License
# (http://www.affero.org/oagpl.html)
#
# Scraper for Mirror and Sunday Mirror
#
#

import re
from datetime import datetime
import time
import string
import sys

sys.path.append("../pylib")
from BeautifulSoup import BeautifulSoup
from JL import ukmedia, ScraperUtils

# raw feedlist generated by hacks/mirror-scrape-rsslist

mirror_rssfeeds = {
	"News": "http://www.mirror.co.uk/newsrss.xml",
	"Top Stories": "http://www.mirror.co.uk/newsrss.xml",
#	"Latest Pictures": "http://www.mirror.co.uk/news/newspix/rss.xml",
	"Columnists": "http://www.mirror.co.uk/news/columnists/rss.xml",
	"Front Pages": "http://www.mydailymirror.com/rss.xml",
	"Investigations": "http://www.mirror.co.uk/news/investigates/rss.xml",
#	"Jobs": "http://www.mirror.co.uk/news/jobs/rss.xml",
#	"Kevin Maguire's blog": "http://maguire.mirror.co.uk/rss.xml",
	"Money & Business": "http://www.mirror.co.uk/news/money/rss.xml",
	"Motoring": "http://www.mirror.co.uk/news/motoring/rss.xml",
	"Technology & Gaming": "http://www.mirror.co.uk/news/technology/rss.xml",
	"Travel": "http://www.mirror.co.uk/news/travel/rss.xml",
#	"Voice of the Mirror": "http://www.mirror.co.uk/news/voiceofthemirror/rss.xml",
#	"Weather": "http://www.mirror.co.uk/news/weather/rss.xml",
	"Weird World": "http://www.mirror.co.uk/news/weirdworld/rss.xml",
	"Sport": "http://www.mirror.co.uk/sport/rss.xml",
	"Top Sports News": "http://www.mirror.co.uk/sport/latest/rss.xml",
#	"Latest Pictures": "http://www.mirror.co.uk/sport/sportpix/rss.xml",
	"Football": "http://www.mirror.co.uk/sport/football/rss.xml",
	"Columnists": "http://www.mirror.co.uk/sport/columnists/rss.xml",
#	"Fantasy Football": "http://www.mirror.co.uk/sport/ytm/rss.xml",
	"Athletics": "http://www.mirror.co.uk/sport/athletics/rss.xml",
	"Boxing": "http://www.mirror.co.uk/sport/boxing/rss.xml",
	"Cricket": "http://www.mirror.co.uk/sport/cricket/rss.xml",
	"Darts": "http://www.mirror.co.uk/sport/darts/rss.xml",
	"Golf": "http://www.mirror.co.uk/sport/golf/rss.xml",
	"Motorsports": "http://www.mirror.co.uk/sport/motorsport/rss.xml",
	"Racing": "http://www.mirror.co.uk/sport/racing/rss.xml",
	"Rugby": "http://www.mirror.co.uk/sport/rugby/rss.xml",
	"Snooker": "http://www.mirror.co.uk/sport/snooker/rss.xml",
	"Tennis": "http://www.mirror.co.uk/sport/tennis/rss.xml",
	"Showbiz": "http://www.mirror.co.uk/showbiz/rss.xml",
	"Top Showbiz News": "http://www.mirror.co.uk/showbiz/latest/rss.xml",
#	"Latest Pictures": "http://www.mirror.co.uk/showbiz/showbizpix/rss.xml",
	"3am": "http://www.mirror.co.uk/showbiz/3am/rss.xml",
	"TV & Film": "http://www.mirror.co.uk/showbiz/tv/rss.xml",
	"TV Land": "http://www.mirror.co.uk/showbiz/tv/tvland/rss.xml",
#	"Filmstore": "http://www.mirror.co.uk/showbiz/filmstore/rss.xml",
	"The Ticket": "http://www.mirror.co.uk/showbiz/theticket/rss.xml",
	"Lifestyle": "http://www.mirror.co.uk/showbiz/yourlife/rss.xml",
#	"Dating": "http://www.mirror.co.uk/showbiz/dating/rss.xml",
	"Health": "http://www.mirror.co.uk/showbiz/yourlife/sexandhealth/rss.xml",
#	"Horoscopes": "http://www.mirror.co.uk/showbiz/horoscopes/rss.xml",
#	"Slimming Club": "http://www.mirror.co.uk/showbiz/slimming/rss.xml",
	"Your Life": "http://www.mirror.co.uk/showbiz/yourlife/rss.xml",
}

sundaymirror_rssfeeds = {
	"News": "http://www.sundaymirror.co.uk/news/rss.xml",
	"Sunday": "http://www.sundaymirror.co.uk/news/sunday/rss.xml",
	"Latest news": "http://www.sundaymirror.co.uk/news/dailynews/rss.xml",
	"Columnists": "http://www.sundaymirror.co.uk/news/columnists/rss.xml",
	"Your Money": "http://www.sundaymirror.co.uk/news/yourmoney/rss.xml",
	"Motoring": "http://www.sundaymirror.co.uk/news/motoring/rss.xml",
	"Homes & Holidays": "http://www.sundaymirror.co.uk/news/homesandholidays/rss.xml",
#	"Weather": "http://www.sundaymirror.co.uk/news/weather/rss.xml",
	"Sport": "http://www.sundaymirror.co.uk/sport/rss.xml",
	"Latest Sport": "http://www.sundaymirror.co.uk/sport/latestsport/rss.xml",
	"Columnists": "http://www.sundaymirror.co.uk/sport/columnists/rss.xml",
	"Football": "http://www.sundaymirror.co.uk/sport/football/rss.xml",
	"Cricket": "http://www.sundaymirror.co.uk/sport/cricket/rss.xml",
	"Rugby": "http://www.sundaymirror.co.uk/sport/rugby/rss.xml",
	"Golf": "http://www.sundaymirror.co.uk/sport/golf/rss.xml",
	"Tennis": "http://www.sundaymirror.co.uk/sport/tennis/rss.xml",
	"Motorsport": "http://www.sundaymirror.co.uk/sport/motorsport/rss.xml",
	"Boxing": "http://www.sundaymirror.co.uk/sport/boxing/rss.xml",
	"Snooker": "http://www.sundaymirror.co.uk/sport/snooker/rss.xml",
	"Racing": "http://www.sundaymirror.co.uk/sport/racing/rss.xml",
	"Poker": "http://www.sundaymirror.co.uk/sport/poker/rss.xml",
#	"Casino": "http://www.sundaymirror.co.uk/sport/casino/rss.xml",
	"Showbiz": "http://www.sundaymirror.co.uk/showbiz/rss.xml",
	"Showbiz with Zoe": "http://www.sundaymirror.co.uk/showbiz/showbiznews/rss.xml",
	"Celebs On Sunday": "http://www.sundaymirror.co.uk/showbiz/celebsonsunday/rss.xml",
	"TV": "http://www.sundaymirror.co.uk/showbiz/tv/rss.xml",
	"Movies": "http://www.sundaymirror.co.uk/showbiz/movies/rss.xml",
	"Music": "http://www.sundaymirror.co.uk/showbiz/music/rss.xml",
	"Health": "http://www.sundaymirror.co.uk/showbiz/health/rss.xml",
#	"Horoscopes": "http://www.sundaymirror.co.uk/showbiz/horoscopes/rss.xml",
#	"Bingo": "http://www.sundaymirror.co.uk/showbiz/bingo/rss.xml",
#	"Dating": "http://www.sundaymirror.co.uk/showbiz/dating/rss.xml",
#	"Slimming": "http://www.sundaymirror.co.uk/showbiz/slimming/rss.xml",
}








# mirror bylines have date in
bylinetidypat = re.compile( """\s*(.*?)\s*(\d{2}/\d{2}/\d{4})\s*""", re.UNICODE )



def Extract( html, context ):
	"""extract article from a mirror.co.uk page"""

	art = context
	soup = BeautifulSoup( html )

	maindiv = soup.find( 'div', { 'class': 'art-body' } )

	headlinediv = maindiv.find( 'h1', { 'class': 'art-headline' } )
	art['title'] = headlinediv.renderContents(None)
	art['title'] = ukmedia.DescapeHTML( art['title'] )
	art['title'] = ukmedia.UncapsTitle( art['title'] )		# don't like ALL CAPS HEADLINES!  

	bylinediv = maindiv.find( 'h2', { 'class': 'art-byline' } )
	rawbyline = bylinediv.renderContents(None)
	m = bylinetidypat.match( rawbyline )
	art['byline'] = m.group(1)
	art['pubdate' ] = ukmedia.ParseDateTime( m.group(2) )

	# use first paragraph as description
	firstpara = maindiv.find( 'p', {'class': 'art-p'} );
	art['description'] = firstpara.renderContents(None)
	art['description'] = ukmedia.FromHTML( art['description'] )

	# disabled - too many wrong guesses, particularly on sports pages.
	# might be worth trying on non-sports pages...
#	if art['byline'] == u'':
#		desc = ukmedia.DecapNames( art['description'] )
#		art['byline'] = ukmedia.ExtractAuthorFromParagraph( desc );

	# special case byline transform
	if art['byline'] == u'Penman & Sommerlad':
		art['byline' ] = u'Andrew Penman and Nick Sommerlad'


	art['content'] = unicode();
	for para in maindiv.findAll( 'p', {'class': 'art-p'} ):
		art['content'] = art['content'] + u'<p>' + para.renderContents(None) + '</p>\n';
	art['content'] = ukmedia.SanitiseHTML( art['content'] )

	return art



# to get unique id out of url
srcid_patterns = [
	re.compile( "-89520-([0-9]+)/([?].*)?$""" ),	# mirror
	re.compile( "-98487-([0-9]+)/([?].*)?$""" ),	# sundaymirror
	re.compile( "%26objectid=([0-9]+)%26""" )	# old url style
	]

def CalcSrcID( url ):
	for pat in srcid_patterns:
		m = pat.search( url )
		if m:
			break
	if not m:
		raise Exception, "Couldn't extract srcid from url ('%s')" % (url)
	return m.group(1)


def ScrubFunc( context, entry ):
	title = context['title']
	title = ukmedia.DescapeHTML( title )
	title = ukmedia.UncapsTitle( title )	# all mirror headlines are caps. sigh.
	context['title'] = title

	# mirror feeds go through mediafed.com. sigh.
	# Luckily the guid has proper link (marked as non-permalink)
	url = entry.guid

	# just in case they decide to change it...
	if url.find( 'mirror.co.uk' ) == -1:
		raise Exception, "URL not from mirror.co.uk or sundaymirror.co.uk ('%s')" % (url)


	context[ 'srcid' ] = CalcSrcID( url )
	context[ 'srcurl' ] = url
	context[ 'permalink'] = url

	return context




def ContextFromURL( url ):
	"""Build up an article scrape context from a bare url."""
	context = {}
	context['srcurl'] = url
	context['permalink'] = url
	context[ 'srcid' ] = CalcSrcID( url )
	if url.find( 'sundaymirror.co.uk' ) == -1:
		context['srcorgname'] = u'mirror'
	else:
		context['srcorgname'] = u'sundaymirror'
	context['lastseen'] = datetime.now()
	return context



def FindArticles():
	found = ukmedia.FindArticlesFromRSS( mirror_rssfeeds, u'mirror', ScrubFunc )
	found = found + ukmedia.FindArticlesFromRSS( sundaymirror_rssfeeds, u'sundaymirror', ScrubFunc )
	return found



if __name__ == "__main__":
    ScraperUtils.RunMain( FindArticles, ContextFromURL, Extract )


