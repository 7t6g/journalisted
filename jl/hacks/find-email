#!/usr/bin/env python

'''
Finds the email address for a given journalist.
'''

import sys
import re
sys.path.insert(0, '../pylib/JL')
import DB
sys.path.insert(0, '../scraper')

_conn = None  # DB connection, but use new_cursor() instead.
_reasons = {}

def new_cursor(msg='?'):
    global _conn, _reasons
    if _conn is None:
        _conn = DB.Connect()
    #print 'new_cursor: %s: %s' % (msg, 'BEGIN')
    cur = _conn.cursor()
    cur.execute('BEGIN')
    _reasons[cur] = msg
    return cur

def end_cursor(cur, ok):
    if ok:
        command = 'COMMIT'
    else:
        command = 'ROLLBACK'
    #print 'end_cursor: %s: %s' % (_reasons[cur], command)
    cur.execute(command)
    cur.close()

ids = []
def new_id(x):
    global ids
    ids.append(x)
    return len(ids)

def get_emails(journo_ref, new_id=new_id):
    cur = new_cursor()
    try:
        cur.execute("SELECT id FROM journo WHERE ref=%s LIMIT 2", [journo_ref])
        rows = cur.fetchall()
        if not rows:
            sys.exit('No such journalist')
        assert len(rows)==1
        journo_id = rows[0][0]
        cur.execute("SELECT a, permalink AS url FROM article a INNER JOIN journo_attr j "
                    "ON (a.status='a' AND a.id=j.article_id) "
                    "WHERE j.journo_id=%s", [journo_id] )
        rows = cur.fetchall()
        distinct = {}
        for (article, url) in rows:
            surname = journo_ref.split('-')[-1]  # FIXME: O'Reilly?
            #emails = re.findall(r'[a-zA-Z0-9\_\.\-]*' + re.escape(surname) +
            #                    r'@[a-zA-Z0-9\_\.\-]+\.(?:co\.uk|com|org|net)', article)
            emails = re.findall(r'[a-zA-Z0-9\_\.\-]+@[a-zA-Z0-9\_\.\-]+', article)
            for email in emails:
                distinct[email.lower()] = url
        emails = ['%s[%d]' % (email, new_id(url)) for (email, url) in distinct.items()]
        end_cursor(cur, True)
        return emails
    except:
        end_cursor(cur, False)
        raise

def main(journo_ref):
    emails = get_emails(journo_ref)
    cleaned = []
    for x in emails:
        if x.startswith('editor@'): continue
        if x.startswith('comment@'): continue
        if x.startswith('info@'): continue
        if x.startswith('review@'): continue
        if x.startswith('diary@'): continue
        if x.startswith('knowledge@'): continue
        if x.startswith('experience@'): continue
        cleaned.append(x)
    return cleaned

def all_journos():
    cur = new_cursor()
    try:
        cur.execute("SELECT id FROM journo")
        num_journos = len(cur.fetchall())
        cur.execute("SELECT id FROM journo "
                    "WHERE id NOT IN (SELECT journo_id FROM journo_email) "
                    "ORDER BY ref")
        rows = cur.fetchall()
        assert len(rows)==num_journos, "Repeated journo ref detected!"
        end_cursor(cur, True)
        return [row[0] for row in rows]
    except:
        end_cursor(cur, False)
        raise

def run(journos):
    likely, unlikely = [], []
    used_ids = {}
    for journo_ref in journos:
        surname = journo_ref.split('-')[-1]
        emails = main(journo_ref)
        if emails:
            emails.sort(key=lambda email: surname not in email)
            emails = ' '.join(emails)
            if surname in emails:
                type = likely
            else:
                type = unlikely
            type.append((journo_ref, emails))
            extracted_ids = re.findall(r'\[(\d+)\]', emails)
            used_ids.update([(int(x), 1) for x in extracted_ids])
    likely.sort()
    likely.sort(key=lambda args: ' ' in args[1])
    unlikely.sort()
    unlikely.sort(key=lambda args: ' ' in args[1])
    for ref, emails in likely:
        print '%s: ' % ref, emails
    print
    for ref, emails in unlikely:
        print '%s: ' % ref, emails
    print
    for i in used_ids.keys():
        print '[%d] %s' % (i, ids[i-1])

if __name__=='__main__':
    args = sys.argv[1:]
    if len(args)==1:
        run(args)
    elif len(args)==0:
        run(all_journos())
    else:
        sys.exit('usage: find-email journo-ref')
