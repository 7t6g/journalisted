#!/usr/bin/env python
#
# migrate articles from "journo_other_articles" to the main "article" table
# sideeffect: creates new publications.
#


import sys
import string
from datetime import datetime
from optparse import OptionParser
import urlparse
import re

import site
site.addsitedir("../pylib")
from JL import DB,Publication

__opts = None
_conn = None



    if _opts.verbose:
        print "new publication [%d]: %s (%s)" % ( pub_id,publication.encode('utf-8'),domain.encode('utf-8'))
    return pub_id



def migrate_article( art ):
    # already got it?
    cursor = _conn.cursor()
    srcid = art['permalink']
    cursor.execute( "SELECT id FROM article WHERE srcid=%s", srcid )

    existing = cursor.fetchall()
    if len(existing) > 0:
        print >>sys.stderr, "already got %s - SKIPPING." % (art['permalink'].encode('utf-8'))
        return

    # 1) sort out publication (create if necessary)
    url = art['permalink'].strip()


    # some domains people have entered which we don't accept
    domain_blacklist = ( 'factiva.com', 'tinyurl.com', 'findarticles.com', 'bit.ly', 'visiolink.com', 'youtube.com',
        'lexisnexis.com', 'google.com', 'feedproxy.google.com', 'feeds.feedburner.com', 'rss.mediafed.com' )


    o = urlparse.urlparse(url)
    domain = o[1]
    domain = domain.lower()
    if domain == '':
        print >>sys.stderr, "SKIP bad/blank url (other_id=%s)" % (art['other_article_id'])
        return
    if domain in domain_blacklist:
        print >>sys.stderr, "SKIP blacklisted url (other_id=%s): %s" % (art['other_article_id'], url.encode('utf-8') )
        return

    try:
        srcorg = Publication.resolve( _conn, domain, art['publication'] )
    except Publication.AmbiguousPublication,e:
        print >>sys.stderr, "SKIP article (other_id=%s): %s" % (art['other_article_id'],e)
        return

    if srcorg is None:
        srcorg = Publication.create( _conn, domain, art['publication'] )
        if _opts.verbose:
            print "new publication [%d]: %s (%s)" % ( srcorg, art['publication'].encode('utf-8'),domain.encode('utf-8'))

    # 2) add article
    # send text to the DB as utf-8
    title = art['title'].encode( 'utf-8' )
    byline = u''
    description = u''
    pubdate = "%s" %(art['pubdate'])
    lastscraped = None
    lastseen = datetime.now()
    firstseen = lastseen
    srcurl = art['permalink']
    permalink = art['permalink']
    wordcount = None


    q = """INSERT INTO article (id,title, byline, description, lastscraped, pubdate, firstseen, lastseen, permalink, srcurl, srcorg, srcid, wordcount, last_comment_check) VALUES (DEFAULT, %s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) RETURNING id"""
    cursor.execute( q, ( title, byline, description, lastscraped, pubdate, firstseen, lastseen, permalink, srcurl, srcorg, srcid, wordcount, lastscraped ) )
    article_id = cursor.fetchone()[0]

    # 3) attribute journo
    cursor.execute( "INSERT INTO journo_attr ( journo_id, article_id) VALUES (%s,%s)", (art['journo_id'],article_id) )

    # 4) mark article for indexing
    cursor.execute( "DELETE FROM article_needs_indexing WHERE article_id=%s", (article_id) )
    cursor.execute( "INSERT INTO article_needs_indexing (article_id) VALUES (%s)", (article_id) )

    if _opts.verbose:
        print "a%d: %s" % ( article_id, art['permalink'].encode('utf-8') )

    # 5) delete the redundant other_article
    cursor.execute( "DELETE FROM journo_other_articles WHERE id=%s", (art['other_article_id']) )



def migrate_articles():
    c = _conn.cursor()
    c.execute( """SELECT * FROM journo_other_articles WHERE status='a'""" )
    while 1:
        row = c.fetchone()
        if row is None:
            break
        other_art = {
            'other_article_id': int( row['id'] ),
            'permalink': row['url'].decode('utf-8'),
            'title': row['title'].decode('utf-8'),
            'pubdate': row['pubdate'],
            'publication': row['publication'].decode('utf-8'),
            'journo_id': int( row['journo_id'] )
        }
        try:
            migrate_article( other_art )
        except Exception, e:
            print >>sys.stderr, "EXCEPTION (other_id=%s): %s" % (other_art['other_article_id'],e)






def main():
    global _opts,_conn

    parser = OptionParser()
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", help="output more (by default, only suspect stuff of output)")
    (_opts, args) = parser.parse_args()
    _conn = DB.Connect()

    migrate_articles()
    _conn.commit()

#    c = _conn.cursor()
#    c.execute( "SELECT id,prettyname,home_url FROM organisation ORDER by prettyname" )
#    orgs = c.fetchall()
#    for row in orgs:
#        print row['id'],row['prettyname'],row['home_url']
#    print len(orgs), "orgs"
#    c.execute( "SELECT status,count(*) as cnt from journo_other_articles group by status" )
#    for row in c.fetchall():
#        print row['status'],row['cnt']
#    _conn.rollback()




if __name__ == "__main__":
    main()

