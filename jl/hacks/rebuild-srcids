#!/usr/bin/env python2.4
#
# Hacky little tool to rebuild srcid of articles using their
# srcurl.
# Currently special cases for each scraper, as it's not
# always clear which scrapers handle each url (blogs.py
# confuses things a bit here)...
#

from optparse import OptionParser
import sys

sys.path.append( "../pylib" )
from JL import DB

sys.path.append( "../scraper" )
import bbcnews
import dailymail
import express
import ft
import guardian
import independent
import herald
import mirror
import scotsman
import sun
import telegraph
import times

sources = {
	'bbcnews': {
		'query': "SELECT id, srcurl FROM article WHERE srcorg=10 AND srcurl LIKE '%.stm'",
		'idfunc': bbcnews.CalcSrcID
		},
	'dailymail': {
		'query': "SELECT id, srcurl FROM article WHERE srcorg=2 AND srcurl LIKE 'http://www.dailymail.co.uk%'",
		'idfunc': dailymail.CalcSrcID
		},
	'express': {
		'query': "SELECT id, srcurl FROM article WHERE srcorg=3 AND srcurl LIKE 'http://%express.co.uk%'",
		'idfunc': express.CalcSrcID
		},
	'ft': {
		'query': "SELECT id, srcurl FROM article WHERE srcorg=18",
		'idfunc': ft.CalcSrcID
		},
	# guardian and observer
	'guardian': {
		'query': "SELECT id, srcurl FROM article WHERE srcorg in (4,11) AND srcurl NOT LIKE '%//blogs.%'",
		'idfunc': guardian.CalcSrcID
		},
	'independent': {
		'query': "SELECT id, srcurl FROM article WHERE srcorg=1 AND srcurl NOT LIKE 'http://indyblogs.typepad.com%' AND srcurl NOT LIKE 'http://blogs.independent.co.uk%'",
		'idfunc': independent.CalcSrcID
		},
	'herald': {
		'query': "SELECT id, srcurl FROM article WHERE srcorg=19",
		'idfunc': herald.CalcSrcID
		},
	'mirror': {	# and sundaymirror
		# mirror has 135 articles with dud urls... (we'll just leave em for now...)
		'query': "SELECT id, srcurl FROM article WHERE srcorg IN (5,12) AND srcurl NOT LIKE 'http://rss1.mediafed.com%'",
		'idfunc': mirror.CalcSrcID
		},
	'scotsman': {	# and scotlandonsunday
		'query': "SELECT id, srcurl FROM article WHERE srcorg IN (15,16)",
		'idfunc': scotsman.CalcSrcID
		},
	'sun': {
		'query': "SELECT id, srcurl FROM article WHERE srcorg=6",
		'idfunc': sun.CalcSrcID
		},
	'telegraph': {
		'query': "SELECT id, srcurl FROM article WHERE srcorg in (7,13) AND srcurl NOT LIKE 'http://blogs.%'",
		'idfunc': telegraph.CalcSrcID
		},
	'times': {
		'query': "SELECT id, srcurl FROM article WHERE srcorg IN (8,9) AND srcurl LIKE '%.ece'",
		'idfunc': times.CalcSrcID
		},
	} 


def DoOne( conn, name ):

	print "doing %s..." % (name)
	s = sources[name]
	query = s['query']
	srcidfunc = s['idfunc']

	c = conn.cursor()
	c.execute( query )

	good = []
	bad = []
	while 1:
		row = c.fetchone()
		if not row:
			break
		url = row['srcurl']
		srcid = srcidfunc( url )

		item = { 'id': row['id'],
			'srcurl': row['srcurl'],
			'srcid': srcid }

		if srcid == None :
			bad.append( item )
		else:
			good.append( item )

	c.close()

	print "  %d articles (%d good, %d bad)" %( len(good)+len(bad), len(good),len(bad) )
	if len(bad) > 0:
		for b in bad:
			print "BAD: %s '%s'" %(b['id'], b['srcurl'])
		raise Exception, "ABORTED"

	print "  applying to db..."
	Apply( conn,good )
	print "  done."

	return (good,bad)


def Apply( conn, items ):
	c = conn.cursor()
	for i in items:
		c.execute( "UPDATE article SET srcid=%s WHERE id=%s", i['srcid'], i['id'] )
	c.close()


#c2.execute( "UPDATE article SET srcid=%s WHERE id=%s", srcid, row['id'] )


def main():
	parser = OptionParser()
	parser.add_option("-d", "--dry-run", action="store_true", dest="dryrun", help="dry run - don't touch DB")
	parser.add_option("-n", "--name",  dest="name", help="Run for a single org only")

	(options, args) = parser.parse_args()

	conn = DB.Connect()

	if options.name:
		DoOne( conn, options.name )
	else:
		for name,s in sources.iteritems():
			DoOne( conn,name )

	if not options.dryrun:
		print "commit changes"
		conn.commit()
	else:
		print "dry run - rolling back"
		conn.rollback()

if __name__ == "__main__":
	main()



