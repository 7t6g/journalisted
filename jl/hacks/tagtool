#!/usr/bin/env python2.4
#
# Tool for managing tags in the database
#

import sys

sys.path.append( "../pylib" )
from JL import Tags,DB



def RemoveBlacklistedTags():
	conn = DB.Connect()

	src = conn.cursor()
	src.execute( "SELECT article_id, tag, freq FROM article_tag" )

	c2 = conn.cursor()

	cnt = 0
	tot = 0
	while 1:
		row = src.fetchone()
		if not row:
			break

		tag = row['tag']
		tag = tag.lower()

		if tag in Tags.blacklist:
			c2.execute( "DELETE FROM article_tag WHERE article_id=%s AND tag=%s", row['article_id'], row['tag'] )

			cnt = cnt + 1
		tot = tot + 1

	conn.commit()
	print "%d removed (out of %d)" % (cnt,tot)



def RebuildTags():
	"""Rebuild the entire article_tag table"""
	conn = DB.Connect()

	c = conn.cursor()

	# take a snapshot of the highest id at this time
	# (assume any new articles added while we're running will have tags
	# generated for them anyway)
	c.execute( "SELECT MAX(id) FROM article" )
	row = c.fetchone()
	highestid = row[0]
	print highestid


	# run through in chunks, 1000 at a time

	overallstart = 0
	overallend = highestid + 1
	chunksize = 1000


	totalchunks = (overallend-overallstart)/chunksize
	chunknum = 0

	chunkstart = overallstart
	while chunkstart < overallend:
		chunkend = chunkstart + chunksize
		if chunkend > overallend:
			chunkend = overallend

		# process chunk where id in range [chunkstart, chunkend)
		print "chunk %d/%d (%d-%d)" % (chunknum,totalchunks,chunkstart,chunkend)

		print " delete"
		c.execute( "DELETE FROM article_tag WHERE article_id>=%s AND article_id<%s", chunkstart, chunkend )

		print " generate"
		c.execute( "SELECT id, content FROM article WHERE status='a' AND id>=%s AND id<%s", chunkstart, chunkend )
		while 1:
			row=c.fetchone()
			if not row:
				break

			article_id = row['id']

			article_content = row['content'].decode('utf-8')
			Tags.Generate( conn, article_id, article_content )

		print " commit"
		conn.commit()

		# next chunk starts where this one left off
		chunkstart = chunkend
		chunknum = chunknum + 1

	print "done"

def Usage():
	print "Usage:"
	print "tagtool remove-blacklisted"
	print "tagtool rebuild-all"
	sys.exit(0)


def main():
	if len(sys.argv) > 1 and sys.argv[1] == 'remove-blacklisted':
		RemoveBlacklistedTags()
	elif len(sys.argv) > 1 and sys.argv[1] == 'rebuild-all':
		RebuildTags()
	else:
		Usage()

main()

