#!/usr/bin/env python
#
# create new organisation entries from other_articles table
# (could also do employment)
#


import sys
import string
from datetime import datetime
from optparse import OptionParser
import urlparse
import re

import site
site.addsitedir("../pylib")
from JL import DB

__opts = None
_conn = None


def resolve_org( domain, name ):
    """ look up an organisation, return org id or None """
    domain = domain.lower().strip().encode( 'ascii' )

    # use domain to look them up
    # want to look for both www. and bare versions
    candidates = [ domain ]
    if domain.startswith( 'www.' ):
        candidates.append( re.sub( '^www.','',domain ) )
    else:
        candidates.append( 'www.' + domain )

    c = _conn.cursor()
    c.execute( "SELECT org_id FROM org_domain WHERE domain in ( %s,%s )",
        (candidates[0], candidates[1]) )

    matches = [ row['org_id'] for row in c.fetchall() ]

    if len( matches ) == 1:
        # seems unambiguous...
        return matches[0]

    if len( matches ) == 0:
        return None

    if len( matches ) > 1:
        n = name.lower().strip().encode( 'utf-8' )
        # try to disambiguate using name
        sql = """SELECT a.org_id
            FROM (org_domain d INNER JOIN org_alias a ON d.org_id=a.org_id)
            WHERE d.domain in (%s,%s) AND alias=%s"""
        c.execute( sql, (candidates[0], candidates[1], n) )
        matched_names = [ row['org_id'] for row in c.fetchall() ]
#        if len(matched_names) == 0:
#            return None
        if len(matched_names) == 1:
            return matched_names[0]

    raise Exception( "Can't disambiguate org (domain: '%s' name: '%s')" % (domain,name) )




def collect_orgs():
    orgs = {}

    c = _conn.cursor()

    c.execute( """SELECT url,publication FROM journo_other_articles""" )# WHERE status='a'""" )
    while 1:
        row = c.fetchone()
        if row is None:
            break

        publication = row['publication'].decode('utf-8')
        url = row['url'].decode('utf-8')
        o = urlparse.urlparse(url)
        domain = o[1]

        if domain not in orgs:
            if publication.strip() == '':
                # use domain for missing publication names
                publication = domain
                publication = re.sub( '^www.','',publication )

            orgs[domain] = publication

    return orgs




def main():
    global _opts,_conn

    parser = OptionParser()
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", help="output more (by default, only suspect stuff of output)")
    (_opts, args) = parser.parse_args()
    _conn = DB.Connect()
    orgs = collect_orgs()

    for domain,name in orgs.items():
        print domain,name, "=> ",resolve_org( domain,name )
#        print "%s (%s)" % (name.encode('utf-8'),domain.encode('utf-8'))

#    print resolve_org( args[0], args[1] )

if __name__ == "__main__":
    main()

