#!/usr/bin/env python
#
# Script to run sanity checks on the JL database.
# eg newspapers getting the pubdate of articles wrong
#


import sys
import string
from datetime import datetime
from optparse import OptionParser
import urlparse

import site
site.addsitedir("../pylib")
from JL import DB

__options = None
_conn = None


def IsSpecialCaseDate( a ):
    """ a whole bunch of special cases - a lot of old dates are valid after all """

    o = urlparse.urlparse( a['permalink'] )

    # guardian in particular has archives going waaaay back...
    if 'century.guardian.co.uk' in o[1]:
        return True
    if 'guardian.co.uk' in o[1]:
        if '/%d/' % (a['pubdate'].year) in a['permalink']:
            return True
    if 'news.bbc.co.uk' in o[1]:
        if '%d:' % (a['pubdate'].year) in a['title']:
            return True
    return False


def SanityCheckDates():
    """ Look for articles with suspect-looking pubdates (ie far into past or future)"""
    global _options,_conn

    if _options.verbose:
        print "checking dates"

    c=_conn.cursor()
    c.execute( "SELECT id,pubdate,title,permalink FROM article WHERE pubdate<'1990-01-01' OR pubdate>NOW()+interval '2 days'" )
    badones = c.fetchall()

    # filter out special cases
    badones = [b for b in badones if not IsSpecialCaseDate(b) ]

    for b in badones:
        print( "Dodgy Date: %s [a%d %s] - %s" % ( b['pubdate'], b['id'], b['title'], b['permalink'] ) )
    c.close()
    if _options.verbose:
        print "found %d dodgy dates" % (len(badones))



def db_getone( sql, params=None ):
    global _conn
    c = _conn.cursor()
    c.execute( sql, params )
    return c.fetchone()[0]



def GeneralInfo():
    n = db_getone( "SELECT count(*) from person_receives_newsletter" )
    print "%d newsletter subscribers" % (n)

    n = db_getone( "SELECT COUNT( DISTINCT journo_id) FROM person_permission WHERE permission='edit'" )
    print "%d journos have signed up to edit their profile" % (n)

    n = db_getone( "SELECT COUNT( DISTINCT journo_id) FROM journo_photo" )
    print " %d have set photos" % (n)

    n = db_getone( "SELECT COUNT( DISTINCT journo_id) FROM person_permission WHERE permission='claimed'" )
    print " %d claims are outstanding" % (n)

    n = db_getone( "SELECT COUNT( DISTINCT journo_id) FROM person_permission WHERE permission='claim_denied'" )
    print " %d claims were denied" % (n)

    # number of journos (active and inactive)
    # number of articles (+hidden)
    # articles awaiting indexing

    # otherarticles awaiting approval
    # scrape errors
    # articles scraped over the last 24 hours






def main():
    global _options,_conn

    parser = OptionParser()
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", help="output more (by default, only suspect stuff of output)")

    (_options, args) = parser.parse_args()

    _conn = DB.Connect()

    GeneralInfo()

    SanityCheckDates()

if __name__ == "__main__":
    main()

