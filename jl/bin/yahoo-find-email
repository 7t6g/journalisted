#!/usr/bin/env python

'''
Guesses an email address and performs a Yahoo query to check it.

Edit the output to remove errors, then use commit-email to store.
'''

import sys
import time
import re
import urllib, urllib2
from urlparse import urlparse
sys.path.insert(0, '../pylib')
sys.path.insert(0, '../pylib/JL')
import DB
from BeautifulSoup import BeautifulStoneSoup


YAHOO_APP_ID = 'FOciVcPV34HtoyxugwPtiV2gHPkgm9Z_y9.7M1KMARQLENAZO_AEr7fecK8q_RAxygZ.UPnAgA--'
    # This is a Journalisted app ID, but 'YahooDemo' works too!

QUIET = False


def search_yahoo(email):
    '''
    Searches Yahoo for that email address (at the related site),
    looks at top ten hits, and returns (corrected_email, url) or None.
    '''
    YAHOO_URL = 'http://search.yahooapis.com/WebSearchService/V1/webSearch'
    surname = email.split('@')[0].split('.')[-1]
    domain = email.split('@')[1]
    if 'dailymail' in domain or 'mailonsunday' in domain:
        # use initials for first names
        before, after = email.split('@', 1)
        names = before.split('.')
        for i, name in enumerate(names):
            if i!=len(names)-1:
                names[i] = name[0]
        email = '.'.join(names) + '@' + after
    if domain=='thetimes.co.uk':
        site = 'timesonline.co.uk'
    else:
        site = domain
    email_re = (
        r'(?!comment|letters|userhelp|tech|editor|reader|arts\.diary|diary|friday.review)' +
        r'(?:(?<=^)|(?<=[^a-zA-Z0-9\-\_\.]))[a-zA-Z0-9\-\_\.]+@%s(?=[^a-zA-Z0-9\-\_]|$)'
        % re.escape(domain))
    initial_re = r'(?:(?:^|(?<=[^a-zA-Z0-9\-\_\.]))[a-z]\.\s*)?'
    surname_email_re = initial_re + re.escape(surname) + '@' + email_re.split('@',1)[1]
    email_re = re.compile(email_re)
    surname_email_re = re.compile(surname_email_re)
    query = '"%s" site:%s' % (email, site)
    search_url = YAHOO_URL + "?" + urllib.urlencode({
        'results': 20,
        'appid': YAHOO_APP_ID,
        'query': query
    })
    if not QUIET:
        print >>sys.stderr, "Yahoo search: '%s' ..." % unicode(query).encode('utf-8')
    req = urllib2.Request(search_url, headers={'User-Agent': 'JournalistedBot'})
    xml = urllib2.urlopen(req).read()
    soup = BeautifulStoneSoup(xml)
    for result in soup.resultset('result'):
        match = surname_email_re.search(result.summary.string or '')
        if match:
            return (re.sub(r'\s*', '', match.group()), result.url.string)
    for result in soup.resultset('result'):
        match = email_re.search(result.summary.string or '')
        if match:
            return (match.group(), result.url.string)

_conn = None

def new_cursor(trans=True):
    global _conn
    if _conn == None:
        _conn = DB.Connect()
    cur = _conn.cursor()
    if trans:
        cur.execute('BEGIN')
    return cur

def commit(cur):
    cur.execute('COMMIT')
    cur.close()

def rollback(cur):
    cur.execute('ROLLBACK')
    cur.close()

def example():
    c = new_cursor()
    try:
        pass #...
    except:
        rollback(c)
        raise
    else:
        commit(c)


def guess_email(journo_ref):
    '''Returns a list of possible email addresses for this journalist.'''
    c = new_cursor(trans=False)
    c.execute("SELECT id FROM journo WHERE ref=%s LIMIT 2", [journo_ref])
    rows = c.fetchall()
    if len(rows)==0:
        sys.exit("error: %s: No such journalist" % journo_ref)
    if len(rows)!=1:
        sys.exit("error: %s: Multiple rows with this ref!" % journo_ref)
    journo_id = rows[0][0]
    c.execute("SELECT permalink FROM article "
              "WHERE id IN"
                "(SELECT article_id FROM journo_attr WHERE journo_id=%s)",
              [journo_id])
    article_urls = [row[0] for row in c.fetchall()]
    domains = {}
    for url in article_urls:
        domain = urlparse(url)[1]
        if domain.endswith('.uk'):
            domain = '.'.join(domain.split('.')[-3:])
        else:
            domain = '.'.join(domain.split('.')[-2:])
        if domain=='timesonline.co.uk':
            domain = 'thetimes.co.uk'
        domains[domain] = 1
    domains = domains.keys()
    prefix = journo_ref.replace('-', '.')
    return ['%s@%s' % (prefix, domain) for domain in domains]

def journos_needing_email():
    c = new_cursor(trans=False)
    c.execute("SELECT ref FROM journo "
              "WHERE id NOT IN (SELECT journo_id FROM journo_email)")
    return [row[0] for row in c.fetchall()]

def run(journos):
    found_urls = 0
    for journo_ref in journos:
        guesses = guess_email(journo_ref)
        for email in guesses:
            time.sleep(1)
            got = search_yahoo(email)
            if got:
                corrected_email, url = got
                found_urls += 1
                print '%s: %s[%d]' % (journo_ref, corrected_email, found_urls)
                print '[%d] %s' % (found_urls, url)
                print
                sys.stdout.flush()
            else:
                if not QUIET: print >>sys.stderr, '%s: no matches' % email

if __name__=='__main__':
    args = sys.argv[1:]
    usage = (__doc__.strip() + '\n'
             'Use -q or --quiet to suppress warnings on stderr.\n\n'
             'usage: yahoo-find-email [-q] [journo-ref]')
    if '--help' in args or '-h' in args:
        sys.exit(usage)
    if '--quiet' in args or '-q' in args:
        QUIET = True
        if '--quiet' in args: args.remove('--quiet')
        if '-q' in args: args.remove('-q')
    if len(args)==0:
        run(journos_needing_email())
    elif len(args)==1:
        run([args[0]])
    else:
        sys.exit(usage)
