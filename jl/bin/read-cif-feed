#!/usr/bin/env python2.4
'''
Looks up the journalist in CIF_XML, reads their feed, outputs entry summaries.
'''

# FIXME: This should clearly be two separate tools, and there's far too much magic.

import sys
import os
import re

sys.path.append('../pylib')
import feedparser
import urllib2


DEFAULT_ENCODING = 'utf-8'

def oneliner(s, encoding=DEFAULT_ENCODING):
    assert isinstance(s, unicode), s
    return s.encode(encoding).replace('\n', '&#10;')

def dump_feed(feed_url, urlonly=False, encoding=DEFAULT_ENCODING):
    try:
        rss = urllib2.urlopen(feed_url).read()
    except urllib2.URLError, e:
        try:
            reason = '(%s: %s)' % tuple(e.reason)
        except:
            try:
                reason = str(e.reason)
            except:
                reason = '(%s)' % e
        sys.exit('Download failed: %s %s' % (feed_url, reason))
    feed = feedparser.parse(rss)
    for entry in feed.entries:
        if urlonly:
            print oneliner(entry.link)
        else:
            print 'Title:',   oneliner(entry.title, encoding)
            print 'Summary:', oneliner(entry.summary, encoding)
            print 'URL:',     oneliner(entry.link, encoding)
            print

def find_journo_feed(journo, cif_xml_filename):
    xml = file(cif_xml_filename).read()
    # Parsing XML with regexps is ok here, we wrote it.
    if looks_like_cif_name(journo):
        m = re.search('<feed url="([^"\n]+%s[^"\n]*)">' % re.escape(journo), xml)
        if m:
            return m.group(1)
    else:
        m = re.search(r'<name>\s*%s\s*</name>' % re.escape(journo), xml)
        if m:
            end = re.compile('</journo>').search(xml, m.start()).end()
            return re.compile('<feed url="(.*?)"').search(xml, m.start(), end).group(1)
        sys.exit('%s: No such journalist "%s".' % (cif_xml_filename, journo))

def looks_like_cif_name(journo):
    return re.match('[a-z_]+$', journo) is not None

def guess_cif_name(journo):
    if looks_like_cif_name(journo):
        return journo
    else:
        guess = journo.lower().replace(' ', '_')
        if looks_like_cif_name(guess):
            return guess
        else:
            sys.exit('Failed to guess Comment Is Free ID from "%s"' % journo)

if __name__=='__main__':
    args = sys.argv[1:]

    guess = '--guess' in args
    if guess:
        args.remove('--guess')

    urlonly = '--urlonly' in args
    if urlonly:
        args.remove('--urlonly')

    cachepath = None
    for arg in args:
        if arg.startswith('--from='):  # FIXME: doesn't allow --from PATH
            cachepath = arg[len('--from='):]
            args.remove(arg)

    def show_help(): # and exit
        sys.exit(
            'usage: read-cif-feed [options] JOURNO [CIF_XML]\n'
            + __doc__.strip() + '\n'
            'JOURNO is the name or identifier of a Comment Is Free journalist\n'
            'and CIF_XML is the output XML from comment-is-free. Use "all" to\n'
            'scrape the feeds for all journalists.\n'
            '\n'
            'options:\n'
            '  --from=PATH  Use version found at PATH (url, file or directory)\n'
            '               Supports any feed, not just Comment Is Free.\n'
            '\n'
            '  --guess      Ignore (or omit) CIF_XML, guess the feed URL instead.\n'
            '\n'
            '  --urlonly    Only output URLs.\n'
            '\n'
            'Newlines in the output are encoded as &#10; so the output can be '
            'parsed\nwith line-oriented parsers.')

    for arg in args:
        if arg.startswith('-'):
            print >>sys.stderr, 'Unknown switch %s.\n' % arg
            show_help()

#    print args, feed_url
    
    if '--help' in args or '-h' in args:
        show_help()
    
    feed_url = None
    
    if len(args)>=1 and args[0]=='all':
        if len(args)==1:
            sys.exit('No CIF_XML. You must provide CIF_XML when using "all".')
        elif len(args)==2 and args[0]=='all':
            cif_xml = args[1]
            for line in file(cif_xml):
                match = re.search('<feed url="(.*?)">', line)
                if match:
                    dump_feed(match.group(1), urlonly=urlonly)
            sys.exit()
        else:
            print >>sys.stderr, "Unexpected arguments provided."
            show_help()
    
    if len(args)==2:
        feed_url = find_journo_feed(*args)
    elif len(args)==1 and (guess or looks_like_cif_name(args[0])):
        feed_url = ('http://commentisfree.guardian.co.uk/%s/index.xml' %
                    guess_cif_name(args[0]))

#    print args, feed_url

    if cachepath is not None:
        if cachepath.startswith('http:'):
            feed_url = cachepath
        else:
            if cachepath.startswith('file:'):
                cachepath = cachepath[len('file:'):]
            if os.path.isfile(cachepath):
                feed_url = 'file:' + cachepath
            elif feed_url:
                basename = feed_url.split('/')[-1]
                if basename == 'index.xml' and \
                   not os.path.isfile(os.path.join(cachepath, basename)):
                    basename = '/'.join(feed_url.split('/')[-2:])
                feed_url = 'file:' + os.path.join(cachepath, basename)
            if not feed_url:
                sys.exit('%s: Not a file and no CIF_XML/--guess/journalist specified.'
                         % cachepath)

#    print args, feed_url
    
    if feed_url:
        dump_feed(feed_url, urlonly=urlonly)
    else:
        if len(args)==1:
            sys.exit('No CIF_XML found, try providing one or using --guess or --from=PATH.')
        else:
            show_help()
