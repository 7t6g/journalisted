#!/usr/bin/php
<?php
/* 
 * build-front-page
 *
 * Run from cron daily to rebuild the offline-generated
 * snippets on the front page.
 *
 */

$short_opts = '';
$long_opts = array('verbose', 'help', 'dryrun' );

chdir(dirname($_SERVER['SCRIPT_FILENAME']));
require_once "../conf/general";
require_once "../../phplib/phpcli.php";
require_once '../../phplib/db.php';
require_once '../../phplib/debug.php';
require_once "../phplib/cache.php";
require_once "../phplib/offline_frontpage.php";
require_once "../phplib/offline_tags.php";


$pages = array(
    'frontpage' => 'offline_frontpage_emit',
    'tags' => 'offline_tags_emit'
    );



$switches = $options[0];
$args = $options[1];
$verbose = 0;
$dryrun = 0;
foreach( $switches as $switch) {
	if ($switch[0]=='--verbose') $verbose = 1;
	if ($switch[0]=='--dryrun') $dryrun = 1;
	if ($switch[0]=='--help') {
		Usage();
        exit;
    }
}

if( sizeof( $args ) == 0 )
{
	Usage();
    exit;
}

foreach( $args as $k=>$pageid )
{
    if( !array_key_exists( $pageid, $pages ) )
    {
        fprintf( STDERR, "ERROR: unknown page '%s'\n", $pageid );
        exit(1);
    }
}


db_connect();


foreach( $args as $k=>$pageid )
{
    $genfunc = $pages[ $pageid ];
    if( $verbose )
	    print "building '{$pageid}' (using {$genfunc})...\n";


    ob_start();
    $start = getmicrotime();
    cache_gen_annotated( $pageid, $genfunc );
    $end = getmicrotime();
    $content = ob_get_contents();
    ob_end_clean();

    if( $dryrun )
        print $content;
    else
        cache_set( $pageid, $content );

    if( $verbose )
    	printf( "done (in %.3fs)\n", $end-$start );
}

/************/


function Usage()
{
    global $pages;

?>

Rebuild cached portions of various pages which take too long
build in response to a web query.

Usage: offline-build-page [--verbose] <page1 page2 ... pageN>

--help      Display this help message
--verbose   output progress to stdout
--dryrun    output html stdout instead of loading into htmlcache table
<?

    print "where pagenames can be:\n";
    foreach( $pages as $p=>$func )
    {
        print " " . $p . "\n";
    }
}



