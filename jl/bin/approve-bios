#!/usr/bin/env python
'''
Interactive tool for approving journalist bios found in the database.
'''

import sys
import textwrap
import re
sys.path.insert(0, '../pylib/JL')
import DB

conn = None

def new_cursor():
    global conn
    if conn is None: conn = DB.Connect()
    return conn.cursor()

def run(journos, active_only=False):
    cur = new_cursor()
    active_clause = ""
    if active_only:
        active_clause = " AND journo.status='a'"
    if journos:
        holes = ','.join(['%s' for j in journos])
        cur.execute('SELECT id, ref FROM journo WHERE ref IN (%s) %s'
                    % (holes, active_clause),
                    journos)
        rows = cur.fetchall()
        ids = [id for id, ref in rows]
        refs = [ref for id, ref in rows]
        for journo in journos:
            if journo not in refs:
                if active_only:
                    print 'warning: no such active journalist "%s"' % journo
                else:
                    print 'warning: no such journalist "%s"' % journo
        cur.execute('SELECT journo_bio.id, journo.ref, bio FROM journo_bio, journo '
                    'WHERE journo_id IN (%s) AND journo.id=journo_id %s'
                    % (holes, active_clause),
                    ids)
    else:
        cur.execute('SELECT journo_bio.id, journo.ref, bio FROM journo_bio, journo '
                    'WHERE NOT approved AND journo.id=journo_id %s'
                    % active_clause)
    rows = cur.fetchall()
    for bio_id, journo_ref, bio in rows:
        print 'Bio %d: %s:' % (bio_id, journo_ref)
        print '\n    %s\n' % textwrap.fill(bio).replace('\n', '\n    ')
        got = ''
        while got not in ('y', 'n'):
            got = raw_input('Approve? [y/n] ').lower()
        if got=='y':
            cur.execute('UPDATE journo_bio SET approved=true WHERE id=%s',
                        [bio_id])
            cur.execute('COMMIT')  # needed to avoid rollback on ctrl-c

if __name__=='__main__':
    args = sys.argv[1:]
    journos = []
    active_only = False
    for arg in list(args):
        if arg in ('-a', '--active'):
            active_only = True
            args.remove(arg)
        if re.match(r'[a-z]+[a-z\-]+$', arg):
            journos.append(arg)
            args.remove(arg)
    if args:
        if '--help' in args or '-h' in args:
            x = ''
        else:
            x = 'unknown argument: %s\n\n' % args[0]
        sys.exit(x + __doc__.strip() + '\n\n' +
                 'usage: python approve-bios [options]\n'
                 'options:\n'
                 '   -a, --active  only active journalists (those shown to users)')
    else:
        run(journos, active_only=active_only)
